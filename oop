class PointCart
    #eğer 
    attr_accessor :x, :y
  
    def initialize(x, y)
      @x = x
      @y = y
    end

    def -(point)
        if point.is_a?(PointCart): #eğer kasrtezyen tipte birsey geçirildiyse hesapla yoksa hata ver 
            point.to_cart

        point.is_a(PointPol)
        #self.x self.y point.to_cart.x point.to_cart.y
    end

    def to_cart
        distance = Math.sqrt((self.x**2 - point.to_cart.x**2) - (self.y**2 - point.to_cart.y**2))
    end

    def to_s
      "[#{@x}, #{@y}]"
    end
  
   
end
  
  class PointPol
    
    attr_accessor :r, :angle
  
    def initialize(r, angle)
      @r = r
      @angle = Angle.new(angle)
    end
  

    def to_s
      "[#{@r}, #{@angle}]"
    end

    def to_s_radian
        "[#{self.r} , #{self.a.to_s_radian}]"  
    end
  
    def -(point)
        #point.is_a?(PointCart) eğer kasrtezyen tipte birsey geçirildiyse hesapla yoksa hata ver 
    
        
        #point.to_cart

        def point.to_cart
            angle_distance = Math.sqrt((self.x**2 + point.x**2) -2*(self.x)(point.x)*cos(self.angle))
        end

        #point.is_a(PointPol)
        #self.x self.y point.to_cart.x point.to_cart.y
    end
    # Convert Polar point to Cartesian point
    #def to_cart
      #x = @r * Math.cos(self.a.radian)
      #y = @r * Math.sin(self.a.radian)

     #angle sınıfı ile aslında encapsulation yaptık
        
    end
  end
  
 class Angle
    attr_accessor :degree, :radian

    def initialize(degree)
        @degree = degree
        
        degree = degree % 360
        
    end
    
    def to_s
        "(#{@degree})"
    end

    def to_radian
        "#{@degree/180.0}pi"
    end
end

def main
    
    a = PointCart.new(6, 8)
    b = PointCart.new(3, 4)
    c = a.self.-(b)
    #1.deger r 10 açı 45 2.değer 5 derece 90 dene
    #c = PointPol.new(12, 180/6)
    #d = Angle.new()
    p a.to_s
    p b.to_s
    p c
end

  main

